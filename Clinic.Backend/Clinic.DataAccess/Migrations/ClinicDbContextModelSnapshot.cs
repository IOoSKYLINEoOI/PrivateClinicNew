// <auto-generated />
using System;
using Clinic.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Clinic.DataAccess.Migrations
{
    [DbContext(typeof(ClinicDbContext))]
    partial class ClinicDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Clinic.DataAccess.Models.AddressEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApartmentNumber")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("HouseNumber")
                        .HasColumnType("int");

                    b.Property<string>("Pavilion")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.AppointmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBooking")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReceptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StatusAppointmentId")
                        .HasColumnType("int");

                    b.Property<Guid>("TimeSlotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReceptionId");

                    b.HasIndex("StatusAppointmentId");

                    b.HasIndex("TimeSlotId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.DepartmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.EmployeeDepartmentEntity", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PositionId");

                    b.ToTable("EmployeeDepartments");
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.EmployeeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("DateOfDismissal")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateOnly>("HiringDate")
                        .HasColumnType("date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.ImageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.PermissionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ReadAddress"
                        },
                        new
                        {
                            Id = 2,
                            Name = "CreateAddress"
                        },
                        new
                        {
                            Id = 3,
                            Name = "UpdateAddress"
                        },
                        new
                        {
                            Id = 4,
                            Name = "DeleteAddress"
                        },
                        new
                        {
                            Id = 5,
                            Name = "ReadDepartment"
                        },
                        new
                        {
                            Id = 6,
                            Name = "CreateDepartment"
                        },
                        new
                        {
                            Id = 7,
                            Name = "UpdateDepartment"
                        },
                        new
                        {
                            Id = 8,
                            Name = "DeleteDepartment"
                        },
                        new
                        {
                            Id = 9,
                            Name = "ReadEmployee"
                        },
                        new
                        {
                            Id = 10,
                            Name = "CreateEmployee"
                        },
                        new
                        {
                            Id = 11,
                            Name = "UpdateEmployee"
                        },
                        new
                        {
                            Id = 12,
                            Name = "DeleteEmployee"
                        },
                        new
                        {
                            Id = 13,
                            Name = "UpdateUser"
                        },
                        new
                        {
                            Id = 14,
                            Name = "DeleteUser"
                        },
                        new
                        {
                            Id = 15,
                            Name = "ReadReception"
                        },
                        new
                        {
                            Id = 16,
                            Name = "CreateReception"
                        },
                        new
                        {
                            Id = 17,
                            Name = "UpdateReception"
                        },
                        new
                        {
                            Id = 18,
                            Name = "DeleteReception"
                        },
                        new
                        {
                            Id = 19,
                            Name = "ReadResult"
                        },
                        new
                        {
                            Id = 20,
                            Name = "CreateResult"
                        },
                        new
                        {
                            Id = 21,
                            Name = "UpdateResult"
                        },
                        new
                        {
                            Id = 22,
                            Name = "DeleteResult"
                        });
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.PositionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Doctor"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Nurse"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Receptionist"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Technician"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Surgeon"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Pediatrician"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Cardiologist"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Neurologist"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Gynecologist"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Oncologist"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Dermatologist"
                        },
                        new
                        {
                            Id = 13,
                            Name = "OrthopedicSurgeon"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Anesthesiologist"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Radiologist"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Physiotherapist"
                        },
                        new
                        {
                            Id = 17,
                            Name = "OccupationalTherapist"
                        },
                        new
                        {
                            Id = 18,
                            Name = "MedicalAssistant"
                        },
                        new
                        {
                            Id = 19,
                            Name = "LaboratoryTechnician"
                        },
                        new
                        {
                            Id = 20,
                            Name = "PharmacyTechnician"
                        },
                        new
                        {
                            Id = 21,
                            Name = "HealthAdministrator"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Dietitian"
                        },
                        new
                        {
                            Id = 23,
                            Name = "ClinicalPsychologist"
                        },
                        new
                        {
                            Id = 24,
                            Name = "SocialWorker"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Pathologist"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Psychiatrist"
                        },
                        new
                        {
                            Id = 27,
                            Name = "FamilyDoctor"
                        },
                        new
                        {
                            Id = 28,
                            Name = "GeneralPractitioner"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Endocrinologist"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Urologist"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Gastroenterologist"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Pulmonologist"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Nephrologist"
                        },
                        new
                        {
                            Id = 34,
                            Name = "InfectiousDiseaseSpecialist"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Hematologist"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Rheumatologist"
                        },
                        new
                        {
                            Id = 37,
                            Name = "SurgeonAssistant"
                        },
                        new
                        {
                            Id = 38,
                            Name = "SurgicalNurse"
                        },
                        new
                        {
                            Id = 39,
                            Name = "EmergencyMedicalTechnician"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Paramedic"
                        },
                        new
                        {
                            Id = 41,
                            Name = "BiomedicalTechnician"
                        },
                        new
                        {
                            Id = 42,
                            Name = "RadiologicTechnologist"
                        },
                        new
                        {
                            Id = 43,
                            Name = "MedicalEquipmentTechnician"
                        },
                        new
                        {
                            Id = 44,
                            Name = "ITSupportSpecialist"
                        },
                        new
                        {
                            Id = 45,
                            Name = "HealthInformationTechnician"
                        },
                        new
                        {
                            Id = 46,
                            Name = "NetworkAdministrator"
                        },
                        new
                        {
                            Id = 47,
                            Name = "MedicalRecordsTechnician"
                        },
                        new
                        {
                            Id = 48,
                            Name = "PharmacyTechnologist"
                        },
                        new
                        {
                            Id = 49,
                            Name = "LaboratoryManager"
                        },
                        new
                        {
                            Id = 50,
                            Name = "QualityControlSpecialist"
                        });
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.ResultICDEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ICDCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ReceptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReceptionId");

                    b.ToTable("ResultsICD");
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Doctor"
                        },
                        new
                        {
                            Id = 4,
                            Name = "SeniorDoctor"
                        });
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.RolePermissionEntity", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissionEntity");
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.ScheduleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<DateOnly>("WorkDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.StatusAppointmentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatusAppointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Scheduled"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Confirmed"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CheckedIn"
                        },
                        new
                        {
                            Id = 4,
                            Name = "InProgress"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Cancelled"
                        },
                        new
                        {
                            Id = 7,
                            Name = "NoShow"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Rescheduled"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Declined"
                        });
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.TimeSlotEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("TimeSlots");
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FatherName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[AddressId] IS NOT NULL");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("ImageId")
                        .IsUnique()
                        .HasFilter("[ImageId] IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.UserRoleEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoleEntity");
                });

            modelBuilder.Entity("ReceptionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateOfReturn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateReceipt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Receptions");
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.AppointmentEntity", b =>
                {
                    b.HasOne("ReceptionEntity", "Reception")
                        .WithMany("Appointments")
                        .HasForeignKey("ReceptionId");

                    b.HasOne("Clinic.DataAccess.Models.StatusAppointmentEntity", "StatusAppointment")
                        .WithMany("Appointments")
                        .HasForeignKey("StatusAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.DataAccess.Models.TimeSlotEntity", "TimeSlot")
                        .WithOne("Appointment")
                        .HasForeignKey("Clinic.DataAccess.Models.AppointmentEntity", "TimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.DataAccess.Models.UserEntity", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reception");

                    b.Navigation("StatusAppointment");

                    b.Navigation("TimeSlot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.DepartmentEntity", b =>
                {
                    b.HasOne("Clinic.DataAccess.Models.AddressEntity", "Address")
                        .WithOne("Department")
                        .HasForeignKey("Clinic.DataAccess.Models.DepartmentEntity", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.EmployeeDepartmentEntity", b =>
                {
                    b.HasOne("Clinic.DataAccess.Models.DepartmentEntity", null)
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.DataAccess.Models.EmployeeEntity", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Clinic.DataAccess.Models.PositionEntity", "Position")
                        .WithMany("EmployeeDepartments")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.EmployeeEntity", b =>
                {
                    b.HasOne("Clinic.DataAccess.Models.UserEntity", "User")
                        .WithOne("Employee")
                        .HasForeignKey("Clinic.DataAccess.Models.EmployeeEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.ResultICDEntity", b =>
                {
                    b.HasOne("ReceptionEntity", "Reception")
                        .WithMany("Results")
                        .HasForeignKey("ReceptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reception");
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.RolePermissionEntity", b =>
                {
                    b.HasOne("Clinic.DataAccess.Models.PermissionEntity", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.DataAccess.Models.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.ScheduleEntity", b =>
                {
                    b.HasOne("Clinic.DataAccess.Models.EmployeeEntity", "Employee")
                        .WithMany("Schedules")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.TimeSlotEntity", b =>
                {
                    b.HasOne("Clinic.DataAccess.Models.ScheduleEntity", "Schedule")
                        .WithMany("TimeSlots")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.UserEntity", b =>
                {
                    b.HasOne("Clinic.DataAccess.Models.AddressEntity", "Address")
                        .WithOne("User")
                        .HasForeignKey("Clinic.DataAccess.Models.UserEntity", "AddressId");

                    b.HasOne("Clinic.DataAccess.Models.ImageEntity", "Image")
                        .WithOne("User")
                        .HasForeignKey("Clinic.DataAccess.Models.UserEntity", "ImageId");

                    b.Navigation("Address");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.UserRoleEntity", b =>
                {
                    b.HasOne("Clinic.DataAccess.Models.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.DataAccess.Models.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReceptionEntity", b =>
                {
                    b.HasOne("Clinic.DataAccess.Models.DepartmentEntity", "Department")
                        .WithMany("Receptions")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.DataAccess.Models.EmployeeEntity", "Employee")
                        .WithMany("Receptions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic.DataAccess.Models.UserEntity", "User")
                        .WithMany("Receptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Employee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.AddressEntity", b =>
                {
                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.DepartmentEntity", b =>
                {
                    b.Navigation("Receptions");
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.EmployeeEntity", b =>
                {
                    b.Navigation("Receptions");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.ImageEntity", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.PositionEntity", b =>
                {
                    b.Navigation("EmployeeDepartments");
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.ScheduleEntity", b =>
                {
                    b.Navigation("TimeSlots");
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.StatusAppointmentEntity", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.TimeSlotEntity", b =>
                {
                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Clinic.DataAccess.Models.UserEntity", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Employee");

                    b.Navigation("Receptions");
                });

            modelBuilder.Entity("ReceptionEntity", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Results");
                });
#pragma warning restore 612, 618
        }
    }
}
